<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="com.example.model.User" >
      <!--
        构造函数，mybatis默认使用无参构造函数实例化对象，如果实体里声明了有参构造函数，必须在这里声明有参构造
        否则会报找不到构造函数
      -->
      <!--<constructor>-->
          <!--<idArg column="id" javaType="int"/>-->
          <!--<arg column="user_name" javaType="String"/>-->
      <!--</constructor>-->
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="real_name" property="realName" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="TINYINT" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="note" property="note" jdbcType="VARCHAR" />
    <result column="position_id" property="positionId" jdbcType="INTEGER" />
  </resultMap>

  <resultMap id="oneToOneMap" type="com.example.model.User" extends="BaseResultMap">
     <association property="position" column="position_id" fetchType="lazy"
                     select="com.example.mapper.PositionMapper.selectByPrimaryKey"/>
  </resultMap>
  <resultMap id="oneToOneMap1" type="com.example.model.User" extends="BaseResultMap">
     <association property="position" javaType="com.example.model.Position" columnPrefix="post_">
         <id column="id" property="id"/>
         <result column="name" property="postName"/>
         <result column="note" property="note"/>
     </association>
  </resultMap>

  <resultMap id="oneToMany1" type="com.example.model.User" extends="BaseResultMap">
      <collection property="jobHistories" ofType="com.example.model.JobHistory">
          <id column="job_id" property="id"/>
          <result column="user_id" property="userId"/>
          <result column="comp_name" property="compName"/>
          <result column="years" property="years"/>
          <result column="title" property="title"/>
      </collection>
  </resultMap>

    <resultMap id="oneToMany2" type="com.example.model.User" extends="BaseResultMap">
        <collection property="jobHistories" column="id" fetchType="lazy"
                    select="com.example.mapper.JobHistoryMapper.selectByUserId"/>
    </resultMap>
    
  <sql id="Base_Column_List" >
    id, user_name, real_name, sex, mobile, email, note, position_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.model.User" useGeneratedKeys="true" keyProperty="id">
    insert into t_user (id, user_name, real_name, 
      sex, mobile, email, 
      note, position_id)
    values (#{id,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR}, 
      #{sex,jdbcType=TINYINT}, #{mobile,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{note,jdbcType=VARCHAR}, #{positionId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.example.model.User" >
    insert into t_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="realName != null" >
        real_name,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="mobile != null" >
        mobile,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="note != null" >
        note,
      </if>
      <if test="positionId != null" >
        position_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="realName != null" >
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=TINYINT},
      </if>
      <if test="mobile != null" >
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="positionId != null" >
        #{positionId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.model.User" >
    update t_user
    <set >
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="realName != null" >
        real_name = #{realName,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=TINYINT},
      </if>
      <if test="mobile != null" >
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="note != null" >
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="positionId != null" >
        position_id = #{positionId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.model.User" >
    update t_user
    set user_name = #{userName,jdbcType=VARCHAR},
      real_name = #{realName,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=TINYINT},
      mobile = #{mobile,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      note = #{note,jdbcType=VARCHAR},
      position_id = #{positionId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectWithPlaceHolder" resultMap="BaseResultMap">
    select ${userName} from ${table} where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="batchQueryById" resultMap="BaseResultMap">
      select
        <include refid="Base_Column_List"/>
      from
        t_user
      where
        id in
      <foreach collection="array" item="id" separator="," open="(" close=")">
          #{id}
      </foreach>
  </select>

  <insert id="batchInsert">
       insert into t_user (user_name, real_name,
      sex, mobile, email,
      note, position_id)
    values
      <foreach collection="list" item="user" separator=",">
          ( #{user.userName,jdbcType=VARCHAR}, #{user.realName,jdbcType=VARCHAR},
          #{user.sex,jdbcType=TINYINT}, #{user.mobile,jdbcType=VARCHAR}, #{user.email,jdbcType=VARCHAR},
          #{user.note,jdbcType=VARCHAR}, #{user.positionId,jdbcType=INTEGER})
      </foreach>
  </insert>

  <select id="selectForChooseOp" resultMap="BaseResultMap">
      select
        <include refid="Base_Column_List"/>
      from
        t_user
      <where>
          <choose>
              <when test="userName != null and userName != ''">
                  and user_name = #{userName}
              </when>
              <when test="id != null">
                  and id = #{id}
              </when>
              <otherwise>
                  and 1 = 1
              </otherwise>
          </choose>
      </where>
  </select>
    
  <select id="selectForOneToOne" resultMap="oneToOneMap">
      select
        <include refid="Base_Column_List"/>
      from
        t_user
      where id = #{id}
  </select>


  <select id="selectForOneToOne1" resultMap="oneToOneMap1">
      select
        u.id,u.user_name,p.id as post_id,p.post_name
      from
        t_user u,t_position p
      where u.id = #{id} and u.position_id = p.id
  </select>

  <select id="selectForOneToMany" resultMap="oneToMany1">
      select
       u.id, u.user_name, u.real_name, u.sex, u.mobile, u.email, u.note, u.position_id,
       j.id as job_id, j.user_id, j.comp_name, j.years, j.title
      from
        t_user u,t_job_history j
      where
        u.id = j.user_id and u.id = #{id}
  </select>

  <select id="selectForOneToMany1" resultMap="oneToMany2">
    select
      <include refid="Base_Column_List"/>
    from
      t_user
    where id = #{id}
  </select>

  <resultMap id="manyToManyResult" type="com.example.model.User" extends="BaseResultMap">
      <collection property="roles" column="id" fetchType="lazy"
                  select="com.example.mapper.RoleMapper.selectForManyToMany"/>
  </resultMap>

  <select id="selectFormanyToMany1" resultMap="manyToManyResult">
    select
      <include refid="Base_Column_List"/>
    from
      t_user
    <where>
        <if test="id != null">
            id = #{id}
        </if>
    </where>
  </select>
</mapper>